{"version":3,"sources":["webpack:///./src/components/Bio.tsx","webpack:///./src/components/Tags.tsx","webpack:///./src/components/SeoFooter.tsx","webpack:///./src/components/PostNavigator.tsx","webpack:///./src/templates/BlogPost.tsx"],"names":["Bio","props","author","prefixText","githubEl","href","github","target","rel","Container","fluid","profilepicture","childImageSharp","alt","id","style","marginRight","rhythm","marginBottom","minWidth","borderRadius","imgStyle","css","twitter","bio","Tags","tags","map","tag","Tag","key","color","theme","PRIMARY","alpha","string","SeoFooter","data","length","content","join","PostNavigator","previous","next","NavItem","to","fields","slug","frontmatter","title","LinkContainer","children","SECONDARY","BlogPostTemplate","pageContext","siteTitle","site","siteMetadata","post","markdownRemark","description","seoFooter","Layout","location","excerpt","scale","date","readingTime","text","dangerouslySetInnerHTML","__html","html","NewsletterSubscribe","BuyMeCoffee","Patreon","Array","isArray"],"mappings":"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","file":"component---src-templates-blog-post-tsx-13d8f6300d73de8b3055.js","sourcesContent":["import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport Image from \"gatsby-image\";\nimport { rhythm } from \"../utils/typography\";\nimport { IGatsbyImageSharpFluidFragment } from \"../../graphql-types\";\nimport { IAuthor as IAuthorBase } from \"../types\";\n\ninterface IAuthor extends IAuthorBase {\n  profilepicture: {\n    childImageSharp: {\n      fluid: IGatsbyImageSharpFluidFragment;\n    };\n  };\n}\n\ninterface IProps {\n  author: IAuthor;\n  prefixText?: string;\n}\n\nexport default function Bio(props: IProps) {\n  const { author, prefixText = \"Written by\" } = props;\n\n  const githubEl = (\n    <a href={author.github} target=\"_blank\" rel=\"noopener noreferrer\">\n      Github\n    </a>\n  );\n\n  return (\n    <Container>\n      <Image\n        fluid={author.profilepicture.childImageSharp.fluid}\n        alt={author.id}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p\n        css={css`\n          margin: 0;\n        `}\n      >\n        {`${prefixText} `}\n        <strong>\n          <a href={`https://twitter.com/${author.twitter}`}>{author.id}</a>\n        </strong>\n        : {author.bio} {githubEl}\n      </p>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${rhythm(2.5)};\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport color from \"color\";\nimport * as theme from \"../utils/theme\";\n\nexport interface IProps {\n  tags: Array<string>;\n}\n\nexport default function Tags({ tags }: IProps) {\n  return (\n    <Container>\n      {tags.map((tag) => (\n        <Tag key={tag}>{`#${tag}`}</Tag>\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  margin-top: 10px;\n  margin-left: -5px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Tag = styled.span`\n  box-sizing: border-box;\n  margin: 0;\n  margin-top: 5px;\n  padding: 0;\n  color: black;\n  line-height: 1.5;\n  display: inline-block;\n  height: auto;\n  margin-right: 8px;\n  padding: 0 7px;\n  font-size: 12px;\n  line-height: 20px;\n  white-space: nowrap;\n  background: ${color(theme.COLOR.PRIMARY).alpha(0.05).string()};\n  border: 1px solid ${theme.COLOR.PRIMARY};\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${color(theme.COLOR.PRIMARY).alpha(0.5).string()};\n  }\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface IProps {\n  data: Array<string>;\n}\n\nexport default function SeoFooter({ data }: IProps) {\n  if (data.length === 0) {\n    return null;\n  }\n\n  const content = data.join(\" \");\n  return <Container>{content}</Container>;\n}\n\nconst Container = styled.div`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  color: #ccc;\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport * as theme from \"../utils/theme\";\n\nexport interface IPostLink {\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n  };\n}\n\nexport interface IProps {\n  previous?: IPostLink;\n  next?: IPostLink;\n}\n\nexport default function PostNavigator(props: IProps) {\n  const { previous, next } = props;\n  return (\n    <Container>\n      <NavItem to={previous?.fields.slug} rel=\"prev\">\n        ← {previous?.frontmatter.title}\n      </NavItem>\n      <NavItem to={next?.fields.slug} rel=\"next\">\n        {next?.frontmatter.title} →\n      </NavItem>\n    </Container>\n  );\n}\n\nexport interface INavItemProps {\n  to?: string;\n  rel: string;\n  children: any;\n}\n\nexport function NavItem(props: INavItemProps) {\n  if (!props.to) {\n    return null;\n  }\n  return (\n    <LinkContainer>\n      <Link to={props.to} rel={props.rel}>\n        {props.children}\n      </Link>\n    </LinkContainer>\n  );\n}\n\nconst Container = styled.nav(`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  padding: 0;\n  flex-direction: column;\n\n  @media (min-width: 800px) {\n    flex-direction: row;\n  }\n`);\n\nconst LinkContainer = styled.div`\n  border: 1px solid ${theme.COLOR.SECONDARY};\n  border-radius: 2px;\n  padding: 8px 16px;\n  margin: 2px;\n\n  @media (min-width: 800px) {\n    width: 49%;\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { css } from \"@emotion/core\";\n\nimport { IBlogPostBySlugQuery } from \"../../graphql-types\";\nimport Bio from \"../components/Bio\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport Tags from \"../components/Tags\";\nimport { rhythm, scale } from \"../utils/typography\";\nimport NewsletterSubscribe from \"../components/NewsletterSubscribe\";\nimport SeoFooter from \"../components/SeoFooter\";\nimport BuyMeCoffee from \"../components/BuyMeCoffee\";\nimport Patreon from \"../components/Patreon\";\nimport PostNavigator from \"../components/PostNavigator\";\n\ninterface IProps {\n  data: IBlogPostBySlugQuery;\n  location: any;\n  pageContext: {\n    slug: string;\n    previous?: any;\n    next?: any;\n  };\n}\n\nexport default function BlogPostTemplate(props: IProps) {\n  const { previous, next } = props.pageContext;\n  const siteTitle = props.data.site.siteMetadata.title;\n  const post = props.data.markdownRemark;\n  const {\n    title,\n    description,\n    author,\n    tags = [],\n    seoFooter = \"\",\n  } = post.frontmatter;\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO\n        title={title}\n        description={`${description || post.excerpt}\\nBy ${author.id}`}\n        author={author}\n      />\n      <article>\n        <header>\n          <h1\n            css={css`\n              margin-top: ${rhythm(1)};\n              margin-bottom: 0;\n            `}\n          >\n            {post.frontmatter?.title}\n          </h1>\n          <div\n            style={{\n              ...scale(-1 / 5),\n            }}\n            css={css`\n              display: block;\n              margin-bottom: ${rhythm(1)};\n            `}\n          >\n            {`${post.frontmatter.date} • ${post.fields.readingTime.text}`}\n            <Tags tags={tags} />\n          </div>\n        </header>\n\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <NewsletterSubscribe />\n\n        <hr\n          css={css`\n            margin-bottom: ${rhythm(1)};\n          `}\n        />\n\n        <footer>\n          <Bio author={author} />\n\n          <div\n            css={css`\n              margin-top: -20px;\n              margin-bottom: 20px;\n            `}\n          >\n            <div>\n              <BuyMeCoffee />\n            </div>\n            <div>\n              <Patreon />\n            </div>\n          </div>\n        </footer>\n      </article>\n\n      <PostNavigator previous={previous} next={next} />\n\n      <SeoFooter data={Array.isArray(seoFooter) ? seoFooter : [seoFooter]} />\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        slug\n        readingTime {\n          text\n        }\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n        seoFooter\n        author {\n          id\n          bio\n          twitter\n          github\n          profilepicture {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}